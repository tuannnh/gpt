{"version":3,"file":"3103.419ae0a03cb3cd90425a.js","mappings":"8PAuBA,MA0JA,EAnIyCA,IAgBnC,IAhBoC,UACxCC,EAAS,MACTC,EAAK,UACLC,EAAS,OACTC,EAAM,OACNC,EAAM,OACNC,EAAM,eACNC,EAAc,WACdC,EAAU,gBACVC,EAAe,SACfC,EAAQ,MACRC,EAAK,QACLC,EAAO,oBACPC,EAAmB,QACnBC,EAAO,4BACPC,GACDf,EACC,MAAM,aACJgB,EAAY,qBACZC,IACEC,EAAAA,EAAAA,GACFd,EAAQS,EAAqBE,OAA6BI,EAAWJ,GAGjEK,GAAWC,EAAAA,EAAAA,IAAuB,OAExCC,EAAAA,EAAAA,KAAU,KACR,GAAKlB,EAML,OAFAmB,EAAAA,EAAAA,MAEOC,EAAAA,EAAqB,GAC3B,CAACpB,IAEJ,MAAMqB,GAAcC,EAAAA,EAAAA,IAAiBC,KAC9Bb,IAILa,EAAEC,iBACFd,KACO,MAGTQ,EAAAA,EAAAA,KAAU,IACRlB,GAASyB,EAAAA,EAAAA,GAAyB,CAAEC,MAAOlB,EAASE,QAASW,SAAiBN,GAC7E,CAACf,EAAQQ,EAASa,KACrBH,EAAAA,EAAAA,KAAU,IAAOlB,GAAUgB,EAASW,QC/FvB,SAAmBC,GAChC,SAASC,EAAcN,GACrB,GAAc,QAAVA,EAAEO,IACJ,OAGFP,EAAEC,iBACFD,EAAEQ,kBAEF,MAAMC,EAAoBC,MAAMC,KAC9BN,EAAQO,iBAAiB,6EAE3B,IAAKH,EAAkBI,OACrB,OAGF,MAAMC,EAAsBL,EAAkBM,WAAWC,GAAOA,EAAGC,WAAWC,SAASC,iBACvF,IAAIC,EAAkB,EAClBN,GAAuB,IAEvBM,EADEpB,EAAEqB,SACcP,EAAsB,EACpCA,EAAsB,EACtBL,EAAkBI,OAAS,EAEbC,EAAsBL,EAAkBI,OAAS,EAC/DC,EAAsB,EACtB,GAIRL,EAAkBW,GAAiBE,OACrC,CAIA,OAFAJ,SAASK,iBAAiB,UAAWjB,GAAe,GAE7C,KACLY,SAASM,oBAAoB,UAAWlB,GAAe,EAAM,CAEjE,CDyDgDmB,CAAUhC,EAASW,cAAWZ,GAAY,CAACf,KAEzFiD,EAAAA,EAAAA,GAAe,CACbC,SAAUlD,EACVmD,OAAQ3C,KAGV4C,EAAAA,EAAAA,IAA4BC,IAAkB,IAAhBC,GAAWD,EAOvC,OANAZ,SAASc,KAAKC,UAAUC,OAAO,kBAAmBC,QAAQ1D,KAEtDA,IAAYA,QAAyBe,IAAfuC,KACxBK,EAAAA,EAAAA,IAnFqB,KAsFhB,KACLlB,SAASc,KAAKC,UAAUI,OAAO,kBAAkB,CAClD,GACA,CAAC5D,IAEJ,MAAM6D,GAAOC,EAAAA,EAAAA,KAEb,IAAKlD,EACH,OA8BF,MAAMmD,GAAgBC,EAAAA,EAAAA,GACpB,QACAjE,EACAc,EACAT,GAAc,uBACdH,GAAU,QAGZ,OACEgE,EAAAA,GAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,GAAAA,cAAA,OACEE,IAAKnD,EACLjB,UAAWgE,EACXK,UAAW,EACXC,KAAK,UAELJ,EAAAA,GAAAA,cAAA,OAAKlE,UAAU,mBACbkE,EAAAA,GAAAA,cAAA,OAAKlE,UAAU,iBAAiBuE,QAAUjE,OAA4BU,EAAVP,IAC5DyD,EAAAA,GAAAA,cAAA,OAAKlE,UAAU,eAAeoE,IAAKtE,GA5CrCK,IAICJ,EAKHmE,EAAAA,GAAAA,cAAA,OAAKlE,UAAU,gBACZI,GACC8D,EAAAA,GAAAA,cAACM,EAAAA,EAAM,CACLC,OAAK,EACLC,MAAM,cACNC,KAAK,UACLC,UAAWd,EAAK,SAChBS,QAAS9D,GAETyD,EAAAA,GAAAA,cAAA,KAAGlE,UAAU,qBAGjBkE,EAAAA,GAAAA,cAAA,OAAKlE,UAAU,eAAeD,SAjBlC,GA0CQmE,EAAAA,GAAAA,cAAA,OAAKlE,UAAU,8BAA8BQ,MAAOA,GACjDD,MAKF,C,kDE3Kb,MAcA,EAdoC8C,CAClCwB,EAAqCC,EAAiBC,KAEtD,MAAMC,GAAc9D,EAAAA,EAAAA,MAEpB,OAAO+D,EAAAA,EAAAA,KAAgB,KACrB,MAAMC,EAAWF,EAAYpD,QAG7B,OAFAoD,EAAYpD,QAAUkD,EAEfD,EAAGK,GAAY,GAAG,GAExBJ,EAAcC,EAAS,C,sDCb5B,IAAII,EAAU,EAEP,SAAS/D,IACd+D,GAAW,CACb,CAEO,SAAS9D,IACd8D,GAAW,CACb,CAEO,SAASC,IACd,OAAOD,EAAU,CACnB,C","sources":["webpack://telegram-t/./src/components/ui/Modal.tsx","webpack://telegram-t/./src/util/trapFocus.ts","webpack://telegram-t/./src/hooks/useLayoutEffectWithPrevDeps.ts","webpack://telegram-t/./src/util/directInputManager.ts"],"sourcesContent":["import type { RefObject } from 'react';\nimport type { FC, TeactNode } from '../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport trapFocus from '../../util/trapFocus';\nimport buildClassName from '../../util/buildClassName';\nimport { enableDirectTextInput, disableDirectTextInput } from '../../util/directInputManager';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from './Button';\nimport Portal from './Portal';\n\nimport './Modal.scss';\n\nconst ANIMATION_DURATION = 200;\n\ntype OwnProps = {\n  title?: string | TextPart[];\n  className?: string;\n  isOpen?: boolean;\n  header?: TeactNode;\n  isSlim?: boolean;\n  hasCloseButton?: boolean;\n  noBackdrop?: boolean;\n  noBackdropClose?: boolean;\n  children: React.ReactNode;\n  style?: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onEnter?: () => void;\n  dialogRef?: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst Modal: FC<OwnProps & StateProps> = ({\n  dialogRef,\n  title,\n  className,\n  isOpen,\n  isSlim,\n  header,\n  hasCloseButton,\n  noBackdrop,\n  noBackdropClose,\n  children,\n  style,\n  onClose,\n  onCloseAnimationEnd,\n  onEnter,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransition(\n    isOpen, onCloseAnimationEnd, shouldSkipHistoryAnimations, undefined, shouldSkipHistoryAnimations,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isOpen]);\n\n  const handleEnter = useLastCallback((e: KeyboardEvent) => {\n    if (!onEnter) {\n      return false;\n    }\n\n    e.preventDefault();\n    onEnter();\n    return true;\n  });\n\n  useEffect(() => (\n    isOpen ? captureKeyboardListeners({ onEsc: onClose, onEnter: handleEnter }) : undefined\n  ), [isOpen, onClose, handleEnter]);\n  useEffect(() => (isOpen && modalRef.current ? trapFocus(modalRef.current) : undefined), [isOpen]);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n  });\n\n  useLayoutEffectWithPrevDeps(([prevIsOpen]) => {\n    document.body.classList.toggle('has-open-dialog', Boolean(isOpen));\n\n    if (isOpen || (!isOpen && prevIsOpen !== undefined)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION);\n    }\n\n    return () => {\n      document.body.classList.remove('has-open-dialog');\n    };\n  }, [isOpen]);\n\n  const lang = useLang();\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    if (header) {\n      return header;\n    }\n\n    if (!title) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        {hasCloseButton && (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <div className=\"modal-title\">{title}</div>\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'Modal',\n    className,\n    transitionClassNames,\n    noBackdrop && 'transparent-backdrop',\n    isSlim && 'slim',\n  );\n\n  return (\n    <Portal>\n      <div\n        ref={modalRef}\n        className={fullClassName}\n        tabIndex={-1}\n        role=\"dialog\"\n      >\n        <div className=\"modal-container\">\n          <div className=\"modal-backdrop\" onClick={!noBackdropClose ? onClose : undefined} />\n          <div className=\"modal-dialog\" ref={dialogRef}>\n            {renderHeader()}\n            <div className=\"modal-content custom-scroll\" style={style}>\n              {children}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Portal>\n  );\n};\n\nexport default Modal;\n","export default function trapFocus(element: HTMLElement) {\n  function handleKeyDown(e: KeyboardEvent) {\n    if (e.key !== 'Tab') {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const focusableElements = Array.from(\n      element.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'),\n    ) as HTMLElement[];\n    if (!focusableElements.length) {\n      return;\n    }\n\n    const currentFocusedIndex = focusableElements.findIndex((em) => em.isSameNode(document.activeElement));\n    let newFocusedIndex = 0;\n    if (currentFocusedIndex >= 0) {\n      if (e.shiftKey) {\n        newFocusedIndex = currentFocusedIndex > 0\n          ? currentFocusedIndex - 1\n          : focusableElements.length - 1;\n      } else {\n        newFocusedIndex = currentFocusedIndex < focusableElements.length - 1\n          ? currentFocusedIndex + 1\n          : 0;\n      }\n    }\n\n    focusableElements[newFocusedIndex].focus();\n  }\n\n  document.addEventListener('keydown', handleKeyDown, false);\n\n  return () => {\n    document.removeEventListener('keydown', handleKeyDown, false);\n  };\n}\n","import { useLayoutEffect, useRef } from '../lib/teact/teact';\n\nconst useLayoutEffectWithPrevDeps = <const T extends readonly any[]>(\n  cb: (args: T | readonly []) => void, dependencies: T, debugKey?: string,\n) => {\n  const prevDepsRef = useRef<T>();\n\n  return useLayoutEffect(() => {\n    const prevDeps = prevDepsRef.current;\n    prevDepsRef.current = dependencies;\n\n    return cb(prevDeps || []);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies, debugKey);\n};\n\nexport default useLayoutEffectWithPrevDeps;\n","let counter = 0;\n\nexport function disableDirectTextInput() {\n  counter += 1;\n}\n\nexport function enableDirectTextInput() {\n  counter -= 1;\n}\n\nexport function getIsDirectTextInputDisabled() {\n  return counter > 0;\n}\n"],"names":["_ref","dialogRef","title","className","isOpen","isSlim","header","hasCloseButton","noBackdrop","noBackdropClose","children","style","onClose","onCloseAnimationEnd","onEnter","shouldSkipHistoryAnimations","shouldRender","transitionClassNames","useShowTransition","undefined","modalRef","useRef","useEffect","disableDirectTextInput","enableDirectTextInput","handleEnter","useLastCallback","e","preventDefault","captureKeyboardListeners","onEsc","current","element","handleKeyDown","key","stopPropagation","focusableElements","Array","from","querySelectorAll","length","currentFocusedIndex","findIndex","em","isSameNode","document","activeElement","newFocusedIndex","shiftKey","focus","addEventListener","removeEventListener","trapFocus","useHistoryBack","isActive","onBack","useLayoutEffectWithPrevDeps","_ref2","prevIsOpen","body","classList","toggle","Boolean","dispatchHeavyAnimationEvent","remove","lang","useLang","fullClassName","buildClassName","React","Portal","ref","tabIndex","role","onClick","Button","round","color","size","ariaLabel","cb","dependencies","debugKey","prevDepsRef","useLayoutEffect","prevDeps","counter","getIsDirectTextInputDisabled"],"sourceRoot":""}