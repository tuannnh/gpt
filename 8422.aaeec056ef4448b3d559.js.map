{"version":3,"file":"8422.aaeec056ef4448b3d559.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiError, ApiChatMember, ApiChatFolder, ApiChatlistExportedInvite,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n} from '../../../types';\nimport type {\n  GlobalState, ActionReturnType, TabArgs,\n} from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  ALL_FOLDER_ID,\n  DEBUG,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n  TME_WEB_DOMAINS,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n  leaveChat,\n  replaceUsers,\n  replaceUserStatuses,\n  replaceChats,\n  replaceChatListIds,\n  addChatMembers,\n  updateUser,\n  addMessages,\n  updateTopics,\n  deleteTopic,\n  updateTopic,\n  updateThreadInfo,\n  updateListedTopicIds,\n  updateChatFullInfo,\n  replaceChatFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber, selectDraft, selectThreadTopMessageId,\n  selectTabState, selectThreadOriginChat, selectThread, selectChatFullInfo,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID, noRequestThreadInfoUpdate,\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID && !noRequestThreadInfoUpdate) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({\n        id, threadId, tabId, noRequestThreadInfoUpdate: true,\n      });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({\n        id,\n        threadId: result.topMessageId,\n        tabId,\n        shouldReplaceLast: true,\n        noRequestThreadInfoUpdate: true,\n      });\n    } else {\n      actions.openChat({\n        id,\n        threadId: topMessageId,\n        tabId,\n        noRequestThreadInfoUpdate: true,\n      });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(global,\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (global): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats(global, 'active');\n    loadChats(global, 'archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n      return;\n    }\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && commentId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chatId);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chatId, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, { avatarHash: undefined });\n  global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, { avatarHash: undefined });\n    global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.translate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.translate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.translate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.translate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\nasync function loadChats<T extends GlobalState>(\n  global: T,\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const tabStates = Object.values(global.byTabId);\n    const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n      const currentChat = selectCurrentChat(global, tabId);\n      return currentChat ? [currentChat] : [];\n    });\n\n    const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n      return selectVisibleUsers(global, tabId) || [];\n    });\n\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n    if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n      if (notificationsChat && lastLocalServiceMessage) {\n        newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n          ...notificationsChat,\n          lastMessage: lastLocalServiceMessage,\n        };\n      }\n    }\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n  idsToUpdateReplyingToId.forEach((chatId) => {\n    const replyingToById = result.replyingToById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!replyingToById && !thread) return;\n\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id, tabId });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChatFullInfo } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","global","listType","offsetId","offsetDate","shouldReplace","arguments","length","undefined","isFullDraftSync","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chatIds","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","tabStates","Object","values","byTabId","visibleChats","flatMap","_ref5","tabId","currentChat","selectCurrentChat","visibleUsers","_ref6","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","idsToUpdateDraft","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","idsToUpdateReplyingToId","replyingToById","isFullyLoaded","setGlobal","loadFullChat","actions","chat","_len","_ref7","Array","_key","getCurrentTabId","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","replaceChatFullInfo","stickerSet","loadStickers","stickerSetInfo","migrateChat","_len2","_ref8","_key2","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","_len3","_ref9","_key3","selectUser","isBot","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","_len5","_ref11","_key5","callAttachBot","startParam","ensureIsSuperGroup","_len6","_ref12","_key6","isChatBasicGroup","newChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","_ref","selectCurrentMessageList","filter","Boolean","nextChatId","getOrderedIds","ALL_FOLDER_ID","find","has","add","loadViewportMessages","threadId","payload","noRequestThreadInfoUpdate","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","selectThreadOriginChat","openPreviousChat","shouldReplaceLast","chatFullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","_payload$isMuted","muteUntil","isMuted","_payload$isMuted2","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","channelId","selectTabState","userId","leaveChat","createdChat","e","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","orderedPinnedIds","isChatArchived","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","_ref2","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","text","formatShareText","slug","chatOrChannelPostId","Number","commentId","comment","inviteHash","voicechat","livestream","substring","start","startApp","startapp","originalParts","webAppName","isWebApp","usernames","c","channelPostId","_len4","_ref10","_key4","isCurrentChat","startBot","botId","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","theme","extractCurrentThemeParams","requestAppWebView","appName","discussionChatId","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","photos","groups","addedById","reduce","group","isForum","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","_ref3","formattedText","replyingToId","readInboxMessageIdByTopicId","_ref4","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","peerId","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","checkNavigatorUserMediaPermissions","isVideo","navigator","mediaDevices","getUserMedia","video","stream","getVideoTracks","checkMicrophonePermission","catch","audio","getAudioTracks","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}