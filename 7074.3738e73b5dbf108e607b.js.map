{"version":3,"file":"7074.3738e73b5dbf108e607b.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/hooks/useTimeout.ts","webpack://telegram-t/./src/util/stopEvent.ts"],"sourcesContent":["import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  description?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  shouldShowSubmit?: boolean;\n  shouldResetValue?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  noRipple?: boolean;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit?: (password: string) => void;\n};\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  description,\n  shouldShowSubmit,\n  shouldResetValue,\n  shouldDisablePasswordManager = false,\n  noRipple = false,\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  useEffect(() => {\n    if (shouldResetValue) {\n      setPassword('');\n    }\n  }, [shouldResetValue]);\n\n  useTimeout(() => {\n    if (!IS_TOUCH_ENV) {\n      inputRef.current!.focus();\n    }\n  }, focusDelayTimeoutMs);\n\n  useEffect(() => {\n    if (error) {\n      requestMutation(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit!(password);\n    }\n  }\n\n  function renderFakeInput() {\n    return (\n      <input\n        type=\"password\"\n        id=\"prevent_autofill\"\n        autoComplete=\"off\"\n        className=\"visually-hidden\"\n        tabIndex={-2}\n      />\n    );\n  }\n\n  return (\n    <form action=\"\" onSubmit={onSubmit ? handleSubmit : stopEvent} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldDisablePasswordManager && renderFakeInput()}\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete={shouldDisablePasswordManager ? 'one-time-code' : 'current-password'}\n          onChange={onPasswordChange}\n          maxLength={256}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"div-button toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={buildClassName('icon', isPasswordVisible ? 'icon-eye' : 'icon-eye-closed')} />\n        </div>\n      </div>\n      {description && <p className=\"description\">{description}</p>}\n      {onSubmit && (canSubmit || shouldShowSubmit) && (\n        <Button type=\"submit\" ripple={!noRipple} isLoading={isLoading} disabled={!canSubmit}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: Blob) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: Blob;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { useEffect, useLayoutEffect, useRef } from '../lib/teact/teact';\n\nfunction useTimeout(callback: () => void, delay?: number) {\n  const savedCallback = useRef(callback);\n\n  useLayoutEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (typeof delay !== 'number') {\n      return undefined;\n    }\n    const id = setTimeout(() => savedCallback.current(), delay);\n    return () => clearTimeout(id);\n  }, [delay]);\n}\n\nexport default useTimeout;\n","import type React from '../lib/teact/teact';\n\nconst stopEvent = (e: React.UIEvent | Event | React.FormEvent) => {\n  e.stopPropagation();\n  e.preventDefault();\n};\n\nexport default stopEvent;\n"],"names":["memo","_ref","isLoading","isPasswordVisible","error","hint","placeholder","submitLabel","description","shouldShowSubmit","shouldResetValue","shouldDisablePasswordManager","noRipple","clearError","onChangePasswordVisibility","onInputChange","onSubmit","inputRef","useRef","lang","useLang","isMobile","useAppLayout","password","setPassword","useState","canSubmit","setCanSubmit","focusDelayTimeoutMs","useEffect","useTimeout","IS_TOUCH_ENV","current","focus","requestMutation","select","React","action","event","preventDefault","stopEvent","autoComplete","className","buildClassName","dir","isRtl","undefined","type","id","tabIndex","ref","value","onChange","e","target","length","MIN_PASSWORD_LENGTH","maxLength","onClick","role","title","Button","ripple","disabled","cropperResultOptions","quality","format","circle","size","width","height","Croppie","croppiePromise","cropper","file","onClose","isCroppieReady","setIsCroppieReady","async","imgFile","cropContainer","document","getElementById","offsetWidth","offsetHeight","enableZoom","boundary","viewport","dataUri","blobToDataUri","bind","url","err","DEBUG","console","initCropper","default","ensureCroppie","then","handleCropClick","useCallback","result","croppedImg","blobToFile","Modal","isOpen","Boolean","hasCloseButton","Loading","round","color","ariaLabel","callback","delay","savedCallback","useLayoutEffect","setTimeout","clearTimeout","stopPropagation"],"sourceRoot":""}