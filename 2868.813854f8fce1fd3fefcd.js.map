{"version":3,"file":"2868.813854f8fce1fd3fefcd.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/helpers/webpageType.ts","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n  cancelMessageMediaDownload,\n  addActiveMessageMediaDownload,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n  selectPinnedIds,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE, IS_ELECTRON,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  if (IS_ELECTRON) {\n    return;\n  }\n\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsAppUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { SettingsScreens } from '../../../types';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n    },\n  }, tabId);\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  if (!messageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = messageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    currentThreadId: messageList.threadId,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        currentThreadId: toThreadId || MAIN_THREAD_ID,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  currentThreadId: number;\n  replyingToTopId?: number;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  if (params.currentThreadId === undefined) {\n    return;\n  }\n\n  if (!params.replyingTo && params.currentThreadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, params.currentThreadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && params.currentThreadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, params.currentThreadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectBot,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId, selectUserFullInfo,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n  const replyingToTopId = (chat.isForum || threadId !== MAIN_THREAD_ID)\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: replyingToId || replyingToTopId,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockContact', bot.id, bot.accessHash);\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  isSameReaction, getUserReactions, isMessageLocal, getDocumentMediaHash,\n} from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const tabState = selectTabState(global, tabId);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat, selectChatFullInfo } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n  removeChatFromChatLists,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isActionMessage,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport {\n  deleteContact, replaceUserStatuses, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nimport useLastCallback from './useLastCallback';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  const lastCallback = useLastCallback(callback);\n\n  useEffect(() => onBeforeUnload(lastCallback), [lastCallback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useLayoutEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const { handleClick: handleHeaderClick, handleMouseDown: handleHeaderMouseDown } = useFastClick(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions, REM } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nexport const MIN_MEDIA_WIDTH_WITH_COMMENTS = 20 * REM;\nexport const MIN_MEDIA_WIDTH_WITH_TEXT = 15 * REM;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 20 * REM;\nconst MIN_MEDIA_WIDTH = 7 * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport animateScroll from '../../../../util/animateScroll';\n\n// This is used when the viewport was replaced.\nconst BOTTOM_FOCUS_OFFSET = 500;\nconst RELOCATED_FOCUS_OFFSET = 750;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  messageId: number,\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n  isJustAdded?: boolean,\n) {\n  const isRelocatedRef = useRef(!isJustAdded);\n\n  useLayoutEffect(() => {\n    const isRelocated = isRelocatedRef.current;\n    isRelocatedRef.current = false;\n\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n      // `noFocusHighlight` is always called with “scroll-to-bottom” buttons\n      const isToBottom = noFocusHighlight;\n\n      const exec = () => animateScroll(\n        messagesContainer,\n        elementRef.current!,\n        isToBottom ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? (isToBottom ? BOTTOM_FOCUS_OFFSET : RELOCATED_FOCUS_OFFSET) : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n        true,\n      );\n\n      if (isRelocated) {\n        // We need this to override scroll setting from Message List layout effect\n        requestForcedReflow(exec);\n      } else {\n        requestMeasure(() => {\n          requestMutation(exec()!);\n        });\n      }\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  renderContent: () => TextPart | undefined;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  renderContent,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{renderContent()}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={renderContent()}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n  selectCanPlayAnimatedEmojis,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: number;\n  messageListType?: MessageListType;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  onPinnedIntersectionChange?: PinnedIntersectionChangedCallback;\n};\n\ntype StateProps = {\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isJustAdded,\n  isLastInList,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  canPlayAnimatedEmojis,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onPinnedIntersectionChange,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.id, message.chatId, isFocused, focusDirection, noFocusHighlight, isJustAdded);\n\n  useEffect(() => {\n    if (!message.isPinned) return undefined;\n\n    return () => {\n      onPinnedIntersectionChange?.({ viewportPinnedIdsToRemove: [message.id], isUnmount: true });\n    };\n  }, [onPinnedIntersectionChange, message.isPinned, message.id]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const renderContent = useLastCallback(() => {\n    return renderActionMessageText(\n      lang,\n      message,\n      senderUser,\n      senderChat,\n      targetUsers,\n      targetMessage,\n      targetChatId,\n      topic,\n      { isEmbedded },\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    );\n  });\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{renderContent()}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play={canPlayAnimatedEmojis}\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{renderContent()}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          renderContent={renderContent}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const {\n      chatId, senderId, replyToMessageId, content,\n    } = message;\n\n    const userId = senderId;\n    const { targetUserIds, targetChatId } = content.action || {};\n    const targetMessageId = replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n      }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message && handleClick}\n      onMouseDown={message && handleMouseDown}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/windowEnvironment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(\n  message: ApiMessage,\n  isDisabled?: boolean | string,\n  forcedUri?: string,\n) {\n  const { isMobile } = useAppLayout();\n\n  const dataUri = forcedUri || getMessageMediaThumbDataUri(message);\n\n  return useCanvasBlur(\n    dataUri,\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, { useRef, useState } from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  });\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      <img\n        src={fullMediaData}\n        className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton\n        && <i className={buildClassName('icon', 'icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import React, { useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  });\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  });\n\n  const className = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames, withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon', 'icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        user={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useRef, useLayoutEffect,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useLayoutEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { getWebpageButtonText } from './helpers/webpageType';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Button from '../../ui/Button';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const { openTelegramLink } = getActions();\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const lang = useLang();\n\n  const handleMediaClick = useLastCallback(() => {\n    onMediaClick!();\n  });\n\n  const handleQuickButtonClick = useLastCallback(() => {\n    if (!webPage) return;\n    openTelegramLink({\n      url: webPage.url,\n    });\n  });\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n    type,\n  } = webPage;\n  const quickButtonLangKey = !inPreview ? getWebpageButtonText(type) : undefined;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n    quickButtonLangKey && 'with-quick-button',\n  );\n\n  function renderQuickButton(langKey: string) {\n    return (\n      <Button\n        className=\"WebPage--quick-button\"\n        size=\"tiny\"\n        color=\"translucent-bordered\"\n        onClick={handleQuickButtonClick}\n      >\n        {lang(langKey)}\n      </Button>\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      <div className=\"WebPage--content\">\n        {photo && !video && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersection}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            size={isSquarePhoto ? 'pictogram' : 'inline'}\n            asForwarded={asForwarded}\n            nonInteractive={!isMediaInteractive}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {isArticle && (\n          <div className=\"WebPage-text\">\n            <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n            {!inPreview && title && (\n              <p className=\"site-title\">{renderText(title)}</p>\n            )}\n            {truncatedDescription && (\n              <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n            )}\n          </div>\n        )}\n        {!inPreview && video && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersection!}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            canAutoPlay={canAutoPlay}\n            lastSyncTime={lastSyncTime}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n      </div>\n      {quickButtonLangKey && renderQuickButton(quickButtonLangKey)}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","// https://github.com/telegramdesktop/tdesktop/blob/3da787791f6d227f69b32bf4003bc6071d05e2ac/Telegram/SourceFiles/history/view/history_view_view_button.cpp#L51\nexport function getWebpageButtonText(type?: string) {\n  switch (type) {\n    case 'telegram_channel_request':\n    case 'telegram_megagroup_request':\n    case 'telegram_chat_request':\n      return 'lng_view_button_request_join';\n    case 'telegram_message':\n      return 'lng_view_button_message';\n    case 'telegram_bot':\n      return 'lng_view_button_bot';\n    case 'telegram_voicechat':\n      return 'lng_view_button_voice_chat';\n    case 'telegram_livestream':\n      return 'lng_view_button_voice_chat_channel';\n    case 'telegram_megagroup':\n    case 'telegram_chat':\n      return 'lng_view_button_group';\n    case 'telegram_channel':\n      return 'lng_view_button_channel';\n    case 'telegram_user':\n      return 'lng_view_button_user';\n    case 'telegram_botapp':\n      return 'lng_view_button_bot_app';\n    case 'telegram_chatlist':\n      return 'ViewChatList';\n    default:\n      return undefined;\n  }\n}\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={forcedWidth || photo.dimensions?.width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.classList.add('has-appendix-thumb');\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { useMemo, memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useSignal from '../../../hooks/useSignal';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - getThrottledProgress() * circumference;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    requestMutation(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  withEffects?: boolean;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n  withEffects,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useLastCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  });\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  withEffects?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  withEffects,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n        withEffects={withEffects}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => (\n            <Avatar\n              key={user.id}\n              user={user}\n              size=\"micro\"\n            />\n          ))}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  withEffects?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n  withEffects,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n          withEffects={withEffects}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID, IS_ELECTRON } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport {\n  getMinMediaWidth,\n  calculateMediaDimensions,\n  MIN_MEDIA_WIDTH_WITH_COMMENTS,\n  MIN_MEDIA_WIDTH_WITH_TEXT,\n} from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n  withReactionEffects?: boolean;\n  withStickerEffects?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n  withReactionEffects,\n  withStickerEffects,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, !IS_ELECTRON, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWidthWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useFocusMessage(\n    ref, messageId, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let reactionsMaxWidth;\n  let contentWidth: number | undefined;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      if (width < (isMediaWidthWithCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)) {\n        contentWidth = width;\n      }\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n    reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n  } else if (sticker && !hasSubheader) {\n    const { width } = getStickerDimensions(sticker, isMobile);\n    style = `width: ${width + extraPadding}px`;\n    reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderQuickReactionButton() {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        withEffects={withReactionEffects}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            withEffects={withReactionEffects}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withReactionEffects: selectPerformanceSettingsValue(global, 'reactionEffects'),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { useState } from '../lib/teact/teact';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useTextLanguage(text?: string) {\n  const [language, setLanguage] = useState<string>();\n\n  useSyncEffect(() => {\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    }\n  }, [text]);\n\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { Signal } from '../../util/signals';\n\nimport parseMessageInput from '../../util/parseMessageInput';\n\nimport type {\n  ApiMessage,\n  ApiFormattedText,\n} from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        console.log(\"Unedited Message: \", message)\n        const textMessage = message.content.text;\n        const textMessageParsed = textMessage ? parseMessageInput(textMessage.text) : undefined;\n\n        const updatedContent = {\n          ...message.content,\n          text: textMessageParsed,\n        };\n        const updatedMessage: ApiMessage = {\n          ...message,\n          content: updatedContent,\n        };\n        console.log(\"Parsed Message: \", updatedMessage)\n\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={updatedMessage}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { isLocalMessageId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback((selectedSticker: ApiSticker) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker, messageList: currentMessageList });\n  });\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { requestForcedReflow, forceMeasure, requestMeasure } from '../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n  selectUserFullInfo,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n  isLocalMessageId,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/windowEnvironment';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll from '../../util/resetScroll';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useContainerHeight from './hooks/useContainerHeight';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          animateScroll(\n            container,\n            lastItemElement!,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport animateScroll from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { IS_IOS } from '../../../../util/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestMeasure(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft, toggleMessageWebPage } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n\n    requestNextMutation(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseMessageInput(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useLastCallback(() => {\n    if (!draft) return;\n\n    // Run one frame after editing draft reset\n    requestMeasure(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n\n      // Wait one more frame until new HTML is rendered\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    });\n  });\n\n  const handleEditCancel = useLastCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleEditComplete = useLastCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageList: { chatId, threadId, type },\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleBlur = useLastCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  });\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    switchWebview,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useLastCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  });\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    switchWebview,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useLastCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  });\n\n  const handleSetAttachments = useLastCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    },\n  );\n\n  const handleAppendFiles = useLastCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  });\n\n  const handleFileSelect = useLastCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  });\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n\n  requestMeasure(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useLastCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  });\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis]);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  function forceUpdateDraft() {\n    updateDraft(undefined, true);\n  }\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectCanAnimateInterface,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useLastCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  });\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useLastCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  });\n\n  const handleClearClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  });\n\n  const handleChangeRecipientClick = useLastCallback(() => {\n    changeForwardRecipient();\n  });\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div className=\"ComposerEmbeddedMessage_inner\">\n        <div className=\"embedded-left-icon\">\n          <i className={buildClassName('icon', leftIcon)} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = selectCanAnimateInterface(global);\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiFormattedText, ApiMessage, ApiMessageEntityTextUrl, ApiWebPage,\n} from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const formattedTextWithLinkRef = useRef<ApiFormattedText>();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const formattedText = parseMessageInput(getHtml());\n    const linkEntity = formattedText.entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    formattedTextWithLinkRef.current = formattedText;\n\n    return linkEntity?.url || formattedText.text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n    const formattedText = formattedTextWithLinkRef.current;\n\n    if (link) {\n      loadWebPagePreview({ text: formattedText! });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useLastCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  });\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div className=\"WebPagePreview_inner\">\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft, MessageList,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n  ApiChatFullInfo,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE,\n  EDITABLE_INPUT_MODAL_ID,\n  SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useDraft from './hooks/useDraft';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    isOnActiveTab: boolean;\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    currentMessageList?: MessageList;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n    slowMode?: ApiChatFullInfo['slowMode'];\n    shouldUpdateStickerSetOrder?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\nconst MOUNT_ANIMATION_DURATION = 430;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  isOnActiveTab,\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  currentMessageList,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n  slowMode,\n  shouldUpdateStickerSetOrder,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const [isMounted, setIsMounted] = useState(false);\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, cancelForceShowSymbolMenu);\n\n  useTimeout(() => {\n    setIsMounted(true);\n  }, MOUNT_ANIMATION_DURATION);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady\n      && isOnActiveTab\n      && isForCurrentMessageList\n      && shouldSuggestStickers\n      && canSendStickers\n      && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    switchWebview: inlineBotSwitchWebview,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useLastCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestNextMutation(() => {\n      focusEditableElement(messageInput);\n    });\n  });\n\n  const insertFormattedTextAndUpdateCursor = useLastCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  });\n\n  const insertCustomEmojiAndUpdateCursor = useLastCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  });\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useLastCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  });\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useLastCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  });\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    // if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n    //   return MainButtonState.Record;\n    // }\n\n    // if (shouldSchedule) {\n    //   return MainButtonState.Schedule;\n    // }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useLastCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  });\n\n  const validateTextLength = useLastCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  });\n\n  const checkSlowMode = useLastCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  });\n\n  const sendAttachments = useLastCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady' || !currentMessageList) {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      messageList: currentMessageList,\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetOrder,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleSendAttachments = useLastCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  });\n\n  const handleSend = useLastCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady' || !currentMessageList) {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        messageList: currentMessageList,\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetOrder,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleClickBotMenu = useLastCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  });\n\n  const handleActivateBotCommandMenu = useLastCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  });\n\n  const handleMessageSchedule = useLastCallback((\n    args: ScheduledMessageArgs, scheduledAt: number, messageList: MessageList,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n        messageList,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        messageList,\n        scheduledAt,\n      });\n    }\n  });\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (currentMessageList && contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt, currentMessageList);\n      });\n    }\n  }, [contentToBeScheduled, currentMessageList, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n\n      requestNextMutation(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      void handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  });\n\n  const handleCustomEmojiSelectAttachmentModal = useLastCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleGifSelect = useLastCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt, currentMessageList);\n        requestMeasure(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ messageList: currentMessageList, gif, isSilent });\n      requestMeasure(() => {\n        resetComposer(true);\n      });\n    }\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt, currentMessageList);\n        requestMeasure(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && canUpdateStickerSetsOrder,\n      });\n      requestMeasure(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  });\n\n  const handleInlineBotSelect = useLastCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady' || !currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt, currentMessageList);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n        messageList: currentMessageList,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleBotCommandSelect = useLastCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handlePollSend = useLastCallback((poll: ApiNewPoll) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt, currentMessageList);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ messageList: currentMessageList, poll });\n      closePollModal();\n    }\n  });\n\n  const sendSilent = useLastCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt, currentMessageList!);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  });\n\n  const handleSendAsMenuOpen = useLastCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  });\n\n  const insertTextAndUpdateCursor = useLastCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  });\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useLastCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const removeSymbol = useLastCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  });\n\n  const removeSymbolAttachmentModal = useLastCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleAllScheduledClick = useLastCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  });\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  // const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n  //   && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useLastCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        void handleSend();\n        break;\n      // case MainButtonState.Record: {\n      //   if (areVoiceMessagesNotAllowed) {\n      //     if (!canSendVoiceByPrivacy) {\n      //       showNotification({\n      //         message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n      //       });\n      //     } else if (!canSendVoices) {\n      //       showAllowedMessageTypesNotification({ chatId });\n      //     }\n      //   } else {\n      //     void startRecordingVoice();\n      //   }\n      //   break;\n      // }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      // case MainButtonState.Schedule:\n      //   if (activeVoiceRecording) {\n      //     pauseRecordingVoice();\n      //   }\n      //   if (!currentMessageList) {\n      //     return;\n      //   }\n\n      // requestCalendar((scheduledAt) => {\n      //   handleMessageSchedule({}, scheduledAt, currentMessageList!);\n      // });\n      // break;\n      default:\n        break;\n    }\n  });\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  // switch (mainButtonState) {\n  //   case MainButtonState.Edit:\n  //     sendButtonAriaLabel = 'Save edited message';\n  //     break;\n  //   case MainButtonState.Record:\n  //     sendButtonAriaLabel = !canAttachMedia\n  //       ? 'Conversation.DefaultRestrictedMedia'\n  //       : 'AccDescrVoiceMessage';\n  // }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n    isMounted && 'mounted',\n  );\n\n  const handleSendScheduled = useLastCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendSilent();\n  });\n\n  const handleSendWhenOnline = useLastCallback(() => {\n    handleMessageSchedule({}, SCHEDULED_WHEN_ONLINE, currentMessageList!);\n  });\n\n  const handleSendScheduledAttachments = useLastCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilentAttachments = useLastCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  });\n\n  // const onSend = mainButtonState === MainButtonState.Edit\n  //   ? handleEditComplete\n  //   : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n  //     : handleSend;\n\n  const onSend = handleSend\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {/* {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        shouldSchedule={shouldSchedule}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      /> */}\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      {/* <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      /> */}\n      {/* <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      /> */}\n      {/* <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      /> */}\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          switchWebview={inlineBotSwitchWebview}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {/* {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )} */}\n          {/* {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )} */}\n          {/* {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )} */}\n          {/* {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )} */}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isReady={isReady}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {/* {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon icon-schedule\" />\n            </Button>\n          )} */}\n          {/* {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )} */}\n          {/* {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )} */}\n          {/* <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          /> */}\n          {/* {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          /> */}\n        </div>\n      </div>\n      {/* {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )} */}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        // disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        noFastClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon icon-send\" />\n        <i className=\"icon icon-schedule\" />\n        <i className=\"icon icon-microphone-alt\" />\n        <i className=\"icon icon-check\" />\n      </Button>\n      {/* {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          canScheduleUntilOnline={canScheduleUntilOnline}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onSendWhenOnline={handleSendWhenOnline}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )} */}\n      {/* {calendar} */}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const chatBotFullInfo = isChatWithBot ? selectUserFullInfo(global, chatBot.id) : undefined;\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const {\n      language, shouldSuggestStickers, shouldSuggestCustomEmoji, shouldUpdateStickerSetOrder,\n    } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chatFullInfo ? chatFullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !selectUserFullInfo(global, user.id)?.noVoiceMessages) ?? true;\n    const slowMode = chatFullInfo?.slowMode;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      isOnActiveTab: !tabState.isBlurred,\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chatFullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      shouldUpdateStickerSetOrder,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chatFullInfo?.botCommands,\n      botCommands: chatBotFullInfo ? (chatBotFullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBotFullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n      slowMode,\n      currentMessageList,\n    };\n  },\n)(Composer));\n","import { useEffect, useRef, useState } from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/windowEnvironment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype ActiveVoiceRecording =\n  { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction }\n  | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useLastCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            requestMutation(() => {\n              recordButtonRef.current!.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n            });\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  });\n\n  const pauseRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  const stopRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { RefObject } from 'react';\nimport React, {\n  useEffect, useState, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n} from '../../config';\nimport {\n  IS_ANDROID, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n// import GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\n\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  // isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n  pinnedIds?: number[];\n  topMessageId?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  // isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n  pinnedIds,\n  topMessageId,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  //Chat ID: 6106833622\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: '6106833622' });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                    <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                      <Button\n                        size=\"tiny\"\n                        fluid\n                        ripple\n                        className=\"join-subscribe-button\"\n                        onClick={handleSubscribeClick}\n                      >\n                        {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                      </Button>\n                    </div>\n                  )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      {/* <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div> */}\n      {/* <GiftPremiumModal isOpen={isGiftPremiumModalOpen} /> */}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      // isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id) && lastSyncTime,\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { getGlobal } from '../../../global';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport useLastCallback from './useLastCallback';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && !isBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\nimport { requestMutation, requestMeasure } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { GlobalState, TabState } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { compact } from '../../util/iteratees';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ninterface LocalOwnProps {\n  shouldLoad?: boolean;\n}\n\nconst ReactionPickerAsync: FC<OwnProps & LocalOwnProps> = (props) => {\n  const { isOpen, shouldLoad } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen && !shouldLoad);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default memo(ReactionPickerAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default memo(ChatlistModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useState, useRef, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, IS_ELECTRON,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n  selectIsReactionPickerOpen,\n  selectPerformanceSettingsValue,\n  selectCanAnimateInterface,\n  selectChatFolder,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\nconst REACTION_PICKER_LOADING_DELAY_MS = 7000; // 7 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsAppUpdateAvailable,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const [shouldLoadReactionPicker, markShouldLoadReactionPicker] = useFlag(false);\n  useTimeout(markShouldLoadReactionPicker, REACTION_PICKER_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, (isMasterTab && !IS_ELECTRON) ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateDownloadedListener = window.electron?.on(ElectronEvent.UPDATE_DOWNLOADED, () => {\n      setIsAppUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron?.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsAppUpdateAvailable(false);\n      removeUpdateDownloadedListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateDownloadedListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons, loadTopReactions,\n    loadDefaultStatusIcons, loadRecentReactions, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab, initMain,\n  ]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, lastSyncTime, loadDefaultStatusIcons, loadRecentEmojiStatuses]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  openChat({\n    id: '6106833622',\n    threadId: undefined,\n    type: 'thread'\n  });\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      {/* <LeftColumn ref={leftColumnRef} /> */}\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} shouldLoad={shouldLoadReactionPicker} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","_len","arguments","length","_ref","Array","_key","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","window","electron","openNewWindow","open","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","filter","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","Number","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","pinnedMessageIds","selectPinnedIds","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","forceOnHeavyAnimation","direction","loadViewportMessages","shouldForceRender","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","split","slice","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","_ref2","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","prevIsScreenLocked","force","leftColumnWidth","management","byChatId","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","settings","byKey","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","passcode","isScreenLocked","currentChat","getChatTitle","topics","onlineTimeout","prevBlurredTabsCount","addCallback","updateIsOnline","getActions","isLockedUpdated","blurredTabsCount","values","byTabId","isMasterTab","newBlurredTabsCount","getAllMultitabTokens","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","offsetId","isOutlying","isBudgetPreload","_len2","_ref3","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","callApi","users","repliesThreadInfos","localMessages","_ref4","isDeleted","_ref5","allMessages","concat","byId","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","currentThreadId","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","shouldForce","user","selectUser","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","isPinned","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","originChannelId","selectThreadOriginChat","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","loadMessageViews","_ref6","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","releaseStatusTimeout","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","currentChatId","activeThreadId","threadInfo","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","loadTopicById","shouldCloseChatOnError","_ref7","threads","updateThread","_ref8","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","newFullInfo","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","buildQueryString","k","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","userReactions","currentReactions","reactions","isReactionChosen","chosenOrder","reaction","existingIndex","r","isSameReaction","recentReactions","addedDate","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","selectDefaultReaction","isMessageLocal","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","selectPerformanceSettingsValue","newActiveReactions","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","isActionMessage","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","removeChatFromChatLists","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","updateUserFullInfo","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","lastCallback","useLastCallback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","drawRect","radius","containerRef","useRef","markupParams","useMemo","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","styles","ref","buildClassName","customTitle","onUnpinMessage","onClick","onAllPinnedClick","isFullWidth","clickBotInlineButton","useLang","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","useFlag","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleClick","handleMouseDown","useFastClick","Button","size","color","ariaLabel","Spinner","ConfirmDialog","onClose","confirmLabel","confirmHandler","onMouseDown","dir","isRtl","PinnedMessageNavigation","Transition","activeKey","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","src","alt","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","onMouseEnter","onMouseLeave","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","withGlobal","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isMobile","useAppLayout","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","ripple","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","onChange","DropdownMenu","forceOpen","positionX","positionY","trigger","onHide","onMouseEnterBackdrop","currentRate","isSelected","MenuItem","icon","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","useState","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","fluid","confirmIsDestructive","Checkbox","label","checked","onCheck","shouldSkipHistoryAnimations","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","selectForwardedSender","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","shiftKey","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","stopPropagation","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldRender","shouldShowChatReportPanel","transitionClassNames","chatReportPanelClassNames","useShowTransition","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","cleanupExceptionKey","canRevealTools","componentEl","classList","requestMutation","remove","connectionStatusText","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","useConnectionStatus","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","useElectronDrag","shouldCleanup","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","MIN_MEDIA_WIDTH_WITH_COMMENTS","MIN_MEDIA_WIDTH_WITH_TEXT","MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS","MIN_MEDIA_WIDTH","MIN_MEDIA_HEIGHT","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","isJustAdded","isRelocatedRef","isRelocated","messagesContainer","closest","isToBottom","exec","animateScroll","requestForcedReflow","requestMeasure","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","startedAt","captureEvents","selectorToPreventScroll","excludedClosestSelector","onSwipe","SwipeDirection","onRelease","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","handleMouseLeave","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","ContextMenuContainer","renderContent","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","tabIndex","role","MediaViewerOrigin","Avatar","loopIndefinitely","withVideo","CropModal","textParts","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","onPinnedIntersectionChange","requestConfetti","useOnIntersect","viewportPinnedIdsToRemove","isUnmount","noAppearanceAnimation","isShown","markShown","startsWith","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","usersById","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","ActionMessageSuggestedAvatar","anchor","onCloseAnimationEnd","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","ActionMessage","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","withSharedAnimation","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","CustomEmoji","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","forcedUri","dataUri","getMessageMediaThumbDataUri","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","forcedWidth","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withBlurredBackground","withThumb","noThumb","thumbRef","blurredBackgroundRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","getServerTimeOffset","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","handleQuickButtonClick","siteName","displayUrl","quickButtonLangKey","getWebpageButtonText","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Video","langKey","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","useTimeout","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","selectTheme","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playingProgressEl","shouldPlay","stopPlaying","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentRepliers","chatsById","hasUnread","commentsText","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","paths","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","path","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","isCustom","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","CustomEmojiEffect","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChannel","isChatGroup","chatUsernames","chatFullInfo","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","hasLinkedChat","linkedChatId","withReactionEffects","withStickerEffects","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","contextMenuTarget","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","setLanguage","useSyncEffect","threshold","promise","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","isMediaWidthWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","postAuthorTitle","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","reactionsMaxWidth","contentWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","forwardAuthor","chatUsername","c","onDoubleClick","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","fakeType","FakeIcon","renderSenderName","TopicChip","EmbeddedMessage","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","Invoice","Location","CommentButton","InlineButtons","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","getContainerHeight","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","textMessage","textMessageParsed","updatedContent","updatedMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","clickArg","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","chatBotFullInfo","isChatLoaded","isGroupChat","isCreator","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","useHotkeys","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","parentElement","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","useEffectWithPrevDeps","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","ContactGreeting","NoMessages","MessageListContent","Loading","backgroundColor","ariaLabelLang","onReadAll","Menu","autoClose","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","fabClassName","ScrollDownButton","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","deleteLastCharacterOutsideSelection","html","tempInput","contentEditable","appendChild","lastChild","textLength","range","createRange","selection","getSelection","setStart","setEnd","removeAllRanges","addRange","execCommand","removeChild","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","reject","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","parseHtml","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","URL_ENTITIES","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","InlineBotTooltip","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","clearEmbedded","captureEscKeyListener","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","formattedTextWithLinkRef","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","shouldUpdateStickerSetOrder","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","slowMode","selectEditingScheduledDraft","isOnActiveTab","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachBots","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","isMounted","setIsMounted","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachMedia","canAttachPolls","canAttachEmbedLinks","isComposerBlocked","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","handleAppendFiles","handleFileSelect","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","isChatAdmin","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotSwitchWebview","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","inputId","messageInput","getElementById","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","requestNextMutation","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","saveDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","forceUpdateDraft","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Send","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","handleSendAttachments","handleSend","currentAttachments","record","handleMessageSchedule","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","isFree","handleInlineBotSelect","isScheduleRequested","canUpdateStickerSetsOrder","inlineResult","sendSilent","additionalArgs","removeSymbol","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","onSend","withBotMenuButton","isSavedMessages","onSelectResult","ComposerEmbeddedMessage","WebPagePreview","MessageInput","editableInputId","placeholder","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","allowDisabledClick","noFastClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","ReactorListModal","MessageLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isMessageLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","isDesktop","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","initResize","resetResize","handleMouseUp","onResize","onReset","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useHistoryBack","onBack","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","FloatingActionButtons","onUnpin","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","onScreenSelect","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","shouldSkipTransition","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","headerRef","SearchInput","parentContainerClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","transitionRef","activeTab","setActiveTab","deletingUserId","setDeletingUserId","tabs","renderingActiveTab","tabType","resultType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","useCallback","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","renderCount","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","memberId","handler","adminMember","forceShowSelf","TabList","big","onSwitchTab","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","searchQuery","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","currentScreen","onChatMemberSelect","RightHeader","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","ReactionPicker","info","ChatlistModal","DEBUG_isLogged","wasTimeFormatSetManually","currentUser","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsAppUpdateAvailable","loadBundle","shouldLoadReactionPicker","markShouldLoadReactionPicker","removeUpdateDownloadedListener","on","ElectronEvent","removeUpdateErrorListener","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","isFullscreen","useFullscreenStatus","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","IS_PWA","usePreventPinchZoomGesture","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}